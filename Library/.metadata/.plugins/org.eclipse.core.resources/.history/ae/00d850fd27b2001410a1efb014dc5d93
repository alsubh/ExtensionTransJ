package baseaspects;

public aspect ContextAspect {
private String Context.name;
	
	private ContextParticipant Context.workingParticipant = null;
	
	public void Context.assignParticipant(ContextParticipant member)
	{
		Debugger.printMessage("Context",Debugger.CONTEXT_ASPECT,this,"The context will be assigned a new participant -" + Thread.currentThread().getName() + "-.",2);
		
		workingParticipant = member;
		
		member.setCurrentContext(this);
		
		Debugger.printMessage("Context",Debugger.CONTEXT_ASPECT,this,"The participant -" + Thread.currentThread().getName() + "-." + " is now working on behalf of the context.",1);
	}
	
	public void Context.dismissParticipant(ContextParticipant member)
	{
		Debugger.printMessage("Context",Debugger.CONTEXT_ASPECT,this,"The context will dismiss its participant -" + Thread.currentThread().getName() + "-.",2);
		
		if(workingParticipant == member)
		{
			workingParticipant = null;
			member.setCurrentContext(null);
		}
		
		Debugger.printMessage("Context",Debugger.CONTEXT_ASPECT,this,"The participant -" + Thread.currentThread().getName() + "-." + " has been dismissed from the context.",1);
		
		Debugger.printMessage("Context",Debugger.CONTEXT_ASPECT,this,"The context will now inactivate itself.",2);
		
		inactivateContext();
		
		Debugger.printMessage("Context",Debugger.CONTEXT_ASPECT,this,"The context has been inactivated.",2);
	}
	
	public String Context.getName() 
	{
		return name;
	}

	public void Context.setName(String newName) 
	{
		name = newName;
	}
	
	public int Context.numberOfParticipants()
	{
		// The basic context always has only 1 participant
		return 1;
	}
	
	public boolean Context.hasParticipant(ContextParticipant participant)
	{
		return (participant == workingParticipant);
	}
	
	public void Context.inactivateContext()
	{
		ContextManager.inactivateContext(this);
	}
	
	public void Context.participantPerformsWork(ContextParticipant member, Object object, String methodName, Object[] args)
	{}
}