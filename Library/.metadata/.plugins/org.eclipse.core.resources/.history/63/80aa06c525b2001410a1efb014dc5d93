package baseaspects;

import umjdt.contexts.Context;
import utilities.*;

public aspect ContextParticipantAspect 
{	
	declare parents: ContextParticipant implements Serializable;

	private Context ContextParticipant.currentContext;
	
	public void Participant.setCurrentContext(Context context)
	{
		// Small addition for debugging purposes
		String name = "";
		
		if(null != context){name = context.getName();}
		else{name = "No Context";}
		// Small addition for debugging purposes
		
		Debugger.printMessage("ContextParticipant",Debugger.PARTICIPANT_ASPECT,this,"The context of the participant will be set to -" + name + "-.",2);
		
		currentContext = context;
		
		Debugger.printMessage("ContextParticipant",Debugger.PARTICIPANT_ASPECT,this,"The context of the participant has been set to -" + name + "-.",1);
	}
	
	public Context ContextParticipant.getCurrentContext()
	{
		Debugger.printMessage("ContextParticipant",Debugger.PARTICIPANT_ASPECT,this,"A reference to the context of the participant is provided.",2);
		
		return currentContext;
	}
	
	// Interface Methods //
	public synchronized void ContextParticipant.createContext(String name, String contextPath)
	{
		Debugger.printMessage("ContextParticipant",Debugger.PARTICIPANT_ASPECT,this,"The participant is willing to create a context named -" + name + "-.",2);
		
		Context context = ContextManager.createContext(name,contextPath);
		
		Debugger.printMessage("ContextParticipant",Debugger.PARTICIPANT_ASPECT,this,"The participant is done creating the context named -" + name + "-.\n",2);
		
		Debugger.printMessage("ContextParticipant",Debugger.PARTICIPANT_ASPECT,this,"The participant will become a part of the context named -" + name + "-.",2);
		
		context.assignParticipant(this);
		
		Debugger.printMessage("ContextParticipant",Debugger.PARTICIPANT_ASPECT,this,"The participant has become a part of the context named -" + name + "-.\n",1);	
	}
	
	public void ContextParticipant.leaveContext()
	{
		String name = getCurrentContext().getName();
		
		Debugger.printMessage("ContextParticipant",Debugger.PARTICIPANT_ASPECT,this,"The participant is willing to leave its context named -" + name + "-.",2);
		
		getCurrentContext().dismissParticipant(this);
		
		Debugger.printMessage("ContextParticipant",Debugger.PARTICIPANT_ASPECT,this,"The participant has left its context named -" + name + "-.\n",2);
	}
	//	 Interface Methods //
	
	
	// The exception handling is not yet integrated into AspectOPTIMA
	// Therefore, for now ContextParticipant is responsible for handling exception signals..
	public void ContextParticipant.receiveTerminationSignal(String message)
	{
		throw new ContextTerminatedException(message);
	}
	
}
