/**
 * 
 */
package TransactionJoinpointTracker;

import javax.transaction.SystemException;
import javax.transaction.TransactionManager;
import javax.transaction.UserTransaction;

import org.apache.log4j.Logger;

import umjdt.joinpoints.AbortEventJP;
import umjdt.joinpoints.BeginEventJP;
import umjdt.joinpoints.CommitEventJP;
import umjdt.joinpoints.EndEventJP;
import umjdt.util.Timestamp;

import com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple;

/**
 * @author AnasAlsubh
 *
 */
public aspect InnerTracking extends TransactionTracker
{
	private Logger logger = Logger.getLogger(InnerTracking.class);
	
	protected BeginEventJP beginEventJp=null;
	protected EndEventJP endEventJp=null;
	protected CommitEventJP commitJp=null;
	protected AbortEventJP abortJp=null;
	
	
	after() throws SystemException: OpenTransaction()
	{	
		beginEventJp = new BeginEventJP();
		beginEventJp.setBeginJP(thisJoinPoint);
		beginEventJp.setBeginTime(new Timestamp());
		passContextInfo(beginEventJp, thisJoinPoint.getTarget());
	}

	private void passContextInfo(BeginEventJP eventJp, Object _target) 
	{	
		try 
		{
			BeginEventJP beginJp= eventJp;
			
			if(_target !=null)
			{
				if(_target instanceof TransactionManager)
				{
					beginJp.setManager((TransactionManager)_target);
					//transaction currently associated with thread.
					transaction =  TransactionImple.getTransaction();
					beginJp.setTransaction(transaction);
				}
				else if(_target instanceof UserTransaction)
				{
					beginJp.setUser((UserTransaction)_target);
				}
			}
			transactionUid = transaction.get_uid();
			globalxid = transaction.getTxId();
			status =transaction.getStatus();
			timeout = transaction.getTimeout();
			
			//beginJp.setTid(new Xid(globalxid, transactionUid));
			beginJp.setTid(globalxid);
			beginJp.setStatus(transaction.getStatus());
			beginJp.setTimeout(transaction.getTimeout());
			
			BeginJoinPoint(beginJp);
		} 
		catch (SystemException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
