/**
 * 
 */
package test;


import com.arjuna.ats.arjuna.AtomicAction;

import TransactionJoinpointTracker.InitiatorJoinpointTracker;
import umjdt.util.Timestamp;

/**
 * @author AnasAlsubh
 *
 */
public aspect testAspect extends InitiatorJoinpointTracker
{
	pointcut testBegin(): call(* com..*+.begin(..));
	pointcut testCommit(): call(* com..*+.commit(..));
	pointcut testAbort(): call(* com..*+.abort(..));
	pointcut testRollback(): call(* com..*+.rollback(..));
	
	Timestamp time= new Timestamp();
	int actionNumber =0;
	
	Object around(): testBegin()
	{
		actionNumber = actionNumber +1;
		
		AtomicAction ac =null;
		Object thiss= null;
		Object sing= null;
		
		if(thisJoinPoint.getTarget().toString() !=null)
		{
			 ac = (AtomicAction)thisJoinPoint.getTarget();
		}
		
		if(thisJoinPoint.getThis() !=null)
		{
			thiss= thisJoinPoint.getThis();
		}
		
		if(thisJoinPoint.getSignature() !=null)
		{
			sing= thisJoinPoint.getSignature();
		}
		
		System.out.println("Before Begin "+ actionNumber + ": "+ ac + " This is " + thiss + " Singature = " + sing +  " Time =" + time.getLocalTime());
		Object i = proceed();
		System.out.println("After begin "+ actionNumber +":"+ thisJoinPoint.getTarget() + " This is" + thisJoinPoint.getThis() + " Singature = " + thisJoinPoint.getSignature() + "Time =" + time.getLocalTime()+  " Result of Action " + actionNumber +":" + i);
		return i;
	}
	
	Object around(): testCommit()
	{
		AtomicAction ac =null;
		Object thiss= null;
		Object sing= null;
		
		if(thisJoinPoint.getTarget().toString() !=null)
		{
			 ac = (AtomicAction)thisJoinPoint.getTarget();
		}
		
		if(thisJoinPoint.getThis() !=null)
		{
			thiss= thisJoinPoint.getThis();
		}
		
		if(thisJoinPoint.getSignature() !=null)
		{
			sing= thisJoinPoint.getSignature();
		}
		
		System.out.println("Before commit "+ actionNumber + ": "+ ac + " This is " + thiss + " Singature = " + sing +  " Time =" + time.getLocalTime());
		Object i = proceed();
		
		System.out.println("After commit "+ actionNumber +": "+ thisJoinPoint.getTarget() + " This is " + thisJoinPoint.getThis() + " Singature = " + thisJoinPoint.getSignature() +  "Time =" + time.getLocalTime() + "Result of Action " + actionNumber +":" + i);
		System.out.println("\n");
		return i;
	}

	
	Object around(): testAbort()
	{
		
		AtomicAction ac =null;
		Object thiss= null;
		Object sing= null;
		
		if(thisJoinPoint.getTarget().toString() !=null)
		{
			 ac = (AtomicAction)thisJoinPoint.getTarget();
		}
		
		if(thisJoinPoint.getThis() !=null)
		{
			thiss= thisJoinPoint.getThis();
		}
		
		if(thisJoinPoint.getSignature() !=null)
		{
			sing= thisJoinPoint.getSignature();
		}
		
		System.out.println("Before Abort "+ actionNumber + ": "+ ac + " This is " + thiss + " Singature = " + sing +  " Time =" + time.getLocalTime());
		int i = proceed();
		System.out.println("After Abort "+ actionNumber +": "+ thisJoinPoint.getTarget() + "This is " + thisJoinPoint.getThis() + " Singature = " + thisJoinPoint.getSignature() + "Time =" + time.getLocalTime()+  " Result of Action " + actionNumber +": " + i);
		System.out.println("\n");
		return i;
	}
}
